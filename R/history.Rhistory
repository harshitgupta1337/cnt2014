require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.random, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec), edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\tyll.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.random, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.reingold.tilford, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
g <- erdoss.renyi.game(n = 100, p.or.m = 0.04)
lo <- layout.fruchterman.reingold(g, repulserad = vcount(g)^2.8,
area = vcount(g)^2.3, niter = 1000)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
# Load the igraph package (install if needed)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)#specify the path, separator(tab, comma, ...), decimal point symbol, etc.
# Transform the table into the required graph format:
bsk.network<-graph.data.frame(bsk, directed=F) #the 'directed' attribute specifies whether the edges are directed
# or equivelent irrespective of the position (1st vs 2nd column). For directed graphs use 'directed=T'
# Inspect the data:
V(bsk.network) #prints the list of vertices (people)
E(bsk.network) #prints the list of edges (relationships)
degree(bsk.network) #print the number of edges per vertex (relationships per people)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.kamada.kawai, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.label.size = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.5, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 1.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
require(igraph)
bsk<-read.table("C:\\Users\\hp\\workspace\\CNT2014\\output\\new.net", sep='\t', dec=',', header=T)
bsk.network<-graph.data.frame(bsk, directed=F)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
plot(bsk.network, layout=layout.fruchterman.reingold, vertex.label.cex = 0.7, vertex.size = 3, vertex.label.dist = 0.1, edge.width=(bsk)$grade, edge.color=E(bsk.network)$spec)
savehistory("C:/Users/hp/workspace/CNT2014/R/history.Rhistory")
